#This will create a High Branched Many-arms Copolymer using Coarsed Grained approach

;1- Firstly we need to open the core_HBMCCG.itp file and remove a line of the [ branches ] field:

[ branches ]
;  donor   acceptor
     0	 1
     0	 1
;     0	 1

;to avoid the pyPolyBuilder to branch the arm that do not start with de dendritic building block

python ../pypolybuilder/__main__.py --core=core_HBMCCG.itp --inter=inter_HBMCCG.itp --ter=inter_dendritic_HBMCCG.itp --params=list_param.itp --ngen=0 --name=CORE2 --output=core2_HBMCCG.itp --gro=core2_HBMCCG.gro

;2 - Now open the generated core2_HBMCCG.itp file and add the [ branches ] field at the end of file:

[ branches ]
; donor acceptor
    0   3
    0   2
    0   2
    0   1
    
;it is important to see that the accptor order was choosen to control the index number of the next building blocks

python ../pypolybuilder/__main__.py --core=core2_HBMCCG.itp --inter=inter_HBMCCG.itp --ter=ter_HBMCCG.itp --params=list_param.itp --ngen=4 --name=DENDCORE --output=dendritic_HBMCCG.itp --gro=dendritic_HBMCCG.gro

;3 - So go ahead to create the ramifications that we want to bond in this dendritic_HBMCCG structure:

python ../pypolybuilder/__main__.py --bbs=inter_dendritic_HBMCCG.itp,inter_HBMCCG.itp,ter_HBMCCG.itp --params=list_param.itp --in=connect_ram1.in --name=RAM1 --output=ram1_HBMCCG.itp --polymer --gro=ram1_HBMCCG.gro

;4 - And the second ramification:

python ../pypolybuilder/__main__.py --bbs=inter_dendritic_HBMCCG.itp,inter_HBMCCG.itp,ter_HBMCCG.itp --params=list_param.itp --in=connect_ram2.in --name=RAM2 --output=ram2_HBMCCG.itp --polymer --gro=ram2_HBMCCG.gro

;5 - After that, we will connect the dendritic structure and these ramifications:

python ../pypolybuilder/__main__.py --bbs=dendritic_HBMCCG.itp,ram1_HBMCCG.itp,ram2_HBMCCG.itp --params=list_param.itp --in=connect_HBP.in --name=HBP --output=HBP_HBMCCG.itp --polymer --gro=HBP_HBMCCG.gro

;In the second step, we have branched a dendritic structure that is not the real structure. To correct that, open the HBP_HBMCCG.itp and change the line:

4    INTR   1   INTR	INTR    4	0.00	42.000
    
;by:

4    DEND	1	DEND	DEND	4	0.000	42.000

;6 - And, finally, connect all the multi-arms blocks in the generated High Branched Polymer. Here we have the multi-arm topology already writed. But it can be straightfoward generated with pyPolyBuilder:

python ../pypolybuilder/__main__.py --bbs=HBP_HBMCCG.itp,mult_HBMCCG.itp --params=list_param.itp --in=connect_HBMCCG.in --name=HBMCCG --output=HBMCCG_HBMCCG.itp --polymer --gro=HBMCCG_HBMCCG.gro --optgeo

;in way to write the connect_HBMCCG.in, we can note that pseudo-atoms of types CORE and DEND does not was bondde with a mult-arm ramification. INTR pseudo-atoms received one multi-arm and TER pseudo-atoms received two multi-arms.

